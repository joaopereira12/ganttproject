/*
 * This file is generated by jOOQ.
 */
package biz.ganttproject.storage.db.tables;


import biz.ganttproject.storage.db.DefaultSchema;
import biz.ganttproject.storage.db.Keys;
import biz.ganttproject.storage.db.tables.records.TaskRecord;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>task.uid</code>.
     */
    public final TableField<TaskRecord, String> UID = createField(DSL.name("uid"), SQLDataType.VARCHAR(1048576).nullable(false), this, "");

    /**
     * The column <code>task.num</code>.
     */
    public final TableField<TaskRecord, Integer> NUM = createField(DSL.name("num"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>task.name</code>.
     */
    public final TableField<TaskRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(1048576).nullable(false), this, "");

    /**
     * The column <code>task.color</code>.
     */
    public final TableField<TaskRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(1048576), this, "");

    /**
     * The column <code>task.shape</code>.
     */
    public final TableField<TaskRecord, String> SHAPE = createField(DSL.name("shape"), SQLDataType.VARCHAR(1048576), this, "");

    /**
     * The column <code>task.is_milestone</code>.
     */
    public final TableField<TaskRecord, Boolean> IS_MILESTONE = createField(DSL.name("is_milestone"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>task.is_project_task</code>.
     */
    public final TableField<TaskRecord, Boolean> IS_PROJECT_TASK = createField(DSL.name("is_project_task"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>task.start_date</code>.
     */
    public final TableField<TaskRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>task.duration</code>.
     */
    public final TableField<TaskRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>task.completion</code>.
     */
    public final TableField<TaskRecord, Integer> COMPLETION = createField(DSL.name("completion"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>task.earliest_start_date</code>.
     */
    public final TableField<TaskRecord, LocalDate> EARLIEST_START_DATE = createField(DSL.name("earliest_start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>task.priority</code>.
     */
    public final TableField<TaskRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.VARCHAR(1048576).nullable(false), this, "");

    /**
     * The column <code>task.web_link</code>.
     */
    public final TableField<TaskRecord, String> WEB_LINK = createField(DSL.name("web_link"), SQLDataType.VARCHAR(1048576), this, "");

    /**
     * The column <code>task.cost_manual_value</code>.
     */
    public final TableField<TaskRecord, BigDecimal> COST_MANUAL_VALUE = createField(DSL.name("cost_manual_value"), SQLDataType.DECIMAL(100000, 2), this, "");

    /**
     * The column <code>task.is_cost_calculated</code>.
     */
    public final TableField<TaskRecord, Boolean> IS_COST_CALCULATED = createField(DSL.name("is_cost_calculated"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>task.notes</code>.
     */
    public final TableField<TaskRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR(1048576), this, "");

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>task</code> table reference
     */
    public Task() {
        this(DSL.name("task"), null);
    }

    public <O extends Record> Task(Table<O> child, ForeignKey<O, TaskRecord> key) {
        super(child, key, TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, Integer, String, String, String, Boolean, Boolean, LocalDate, Integer, Integer, LocalDate, String, String, BigDecimal, Boolean, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
