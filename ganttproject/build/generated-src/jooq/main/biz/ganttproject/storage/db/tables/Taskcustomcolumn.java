/*
 * This file is generated by jOOQ.
 */
package biz.ganttproject.storage.db.tables;


import biz.ganttproject.storage.db.DefaultSchema;
import biz.ganttproject.storage.db.Keys;
import biz.ganttproject.storage.db.tables.records.TaskcustomcolumnRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Taskcustomcolumn extends TableImpl<TaskcustomcolumnRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taskcustomcolumn</code>
     */
    public static final Taskcustomcolumn TASKCUSTOMCOLUMN = new Taskcustomcolumn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskcustomcolumnRecord> getRecordType() {
        return TaskcustomcolumnRecord.class;
    }

    /**
     * The column <code>taskcustomcolumn.uid</code>.
     */
    public final TableField<TaskcustomcolumnRecord, String> UID = createField(DSL.name("uid"), SQLDataType.VARCHAR(1048576).nullable(false), this, "");

    /**
     * The column <code>taskcustomcolumn.column_id</code>.
     */
    public final TableField<TaskcustomcolumnRecord, String> COLUMN_ID = createField(DSL.name("column_id"), SQLDataType.VARCHAR(1048576).nullable(false), this, "");

    /**
     * The column <code>taskcustomcolumn.column_value</code>.
     */
    public final TableField<TaskcustomcolumnRecord, String> COLUMN_VALUE = createField(DSL.name("column_value"), SQLDataType.VARCHAR(1048576), this, "");

    private Taskcustomcolumn(Name alias, Table<TaskcustomcolumnRecord> aliased) {
        this(alias, aliased, null);
    }

    private Taskcustomcolumn(Name alias, Table<TaskcustomcolumnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taskcustomcolumn</code> table reference
     */
    public Taskcustomcolumn(String alias) {
        this(DSL.name(alias), TASKCUSTOMCOLUMN);
    }

    /**
     * Create an aliased <code>taskcustomcolumn</code> table reference
     */
    public Taskcustomcolumn(Name alias) {
        this(alias, TASKCUSTOMCOLUMN);
    }

    /**
     * Create a <code>taskcustomcolumn</code> table reference
     */
    public Taskcustomcolumn() {
        this(DSL.name("taskcustomcolumn"), null);
    }

    public <O extends Record> Taskcustomcolumn(Table<O> child, ForeignKey<O, TaskcustomcolumnRecord> key) {
        super(child, key, TASKCUSTOMCOLUMN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TaskcustomcolumnRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9B;
    }

    @Override
    public List<ForeignKey<TaskcustomcolumnRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_9);
    }

    private transient Task _task;

    /**
     * Get the implicit join path to the <code>PUBLIC.task</code> table.
     */
    public Task task() {
        if (_task == null)
            _task = new Task(this, Keys.CONSTRAINT_9);

        return _task;
    }

    @Override
    public Taskcustomcolumn as(String alias) {
        return new Taskcustomcolumn(DSL.name(alias), this);
    }

    @Override
    public Taskcustomcolumn as(Name alias) {
        return new Taskcustomcolumn(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Taskcustomcolumn rename(String name) {
        return new Taskcustomcolumn(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Taskcustomcolumn rename(Name name) {
        return new Taskcustomcolumn(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
